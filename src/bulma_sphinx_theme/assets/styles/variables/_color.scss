/*******************************************************************************
* master color map. Only the colors that actually differ between light and dark
* themes are specified separately.
*
* NOTE: this theme defines "info == primary" and "warning == secondary"
*/
$bst-semantic-colors: (
  "primary": hsl(171, 100%, 41%),
  "secondary": rgb(238, 144, 64),
  "info": hsl(204, 86%, 53%),
  "warning": hsl(48, 100%, 67%),
  "link": (
    "light": hsl(217, 71%, 53%),
    "dark": hsl(217, 68%, 44%),
  ),
  "success": (
    "light": hsl(141, 53%, 53%),
    "dark": hsl(141, 49%, 32%),
  ),
  "attention": (
    "light": rgb(255, 193, 7),
    "dark": rgb(220, 169, 15),
  ),
  "danger": (
    "light": hsl(348, 100%, 61%),
    "dark": hsl(348, 92%, 36%),
  ),
  "text-base": (
    "light": rgb(50, 50, 50),
    // Black + 50
    "dark": rgb(206, 206, 206),
    // White - 50
  ),
  "text-muted": (
    "light": rgb(100, 100, 100),
    // Twice as far from 0 as base
    "dark": rgb(166, 166, 166),
    // Twice as far from 256 as base
  ),
  "shadow": (
    "light": rgb(216, 216, 216),
    "dark": rgb(33, 33, 33),
  ),
  "border": (
    "light": rgb(201, 201, 201),
    "dark": rgb(192, 192, 192),
  ),
  "inline-code": (
    "light": rgb(232, 62, 140),
    "dark": rgb(221, 158, 194),
  ),
  "target": (
    "light": rgb(251, 229, 78),
    "dark": rgb(71, 39, 0),
  ),
  // DEPTH COLORS
  // background: color of the canvas / the furthest back layer
  "background":
    (
      "light": rgb(255, 255, 255),
      "dark": rgb(18, 18, 18),
    ),
  // on-background: provides slight contrast against background
  // (by use of shadows in light theme)
  "on-background":
    (
      "light": rgb(255, 255, 255),
      "dark": rgb(30, 30, 30),
    ),
  // surface: object set above the background (without shadows)
  // Uses JupyterLab cell background colors in light/dark theme
  "surface":
    (
      "light": rgb(245, 245, 245),
      "dark": rgb(33, 33, 33),
    ),
  // on_surface: object on top of surface object (without shadows)
  "on-surface":
    (
      "light": rgb(225, 225, 225),
      "dark": rgb(55, 55, 55),
    ),
  "background-info-panel": (
    "light": linear-gradient(0.25turn, #e3e5f7, #d9e1ef, #e8ebfb),
    "dark": linear-gradient(0.25turn, #5e605a, #51544e, #5a5c58),
  ),
  "canvas": (
    "light": rgb(246, 248, 250),
    "dark": rgb(22, 27, 34),
  ),
);

/*******************************************************************************
* write the color rules for each theme (light/dark)
*/

/* NOTE:
 * Mixins enable us to reuse the same definitions for the different modes
 * https://sass-lang.com/documentation/at-rules/mixin
 * #{something} inserts a variable into a CSS selector or property name
 * https://sass-lang.com/documentation/interpolation
 */
@mixin theme-colors($mode) {
  // check if this color is defined differently for light/dark
  @each $name, $value in $bst-semantic-colors {
    @if type-of($value) ==map {
      $value: map-get($value, $mode);
    }

    & {
      --bst-color-#{$name}: #{$value};
    }
  }

  // assign the "duplicate" colors (ones that just reference other variables)
  & {
    --bst-color-link-hover: var(--bst-color-warning);
    --bst-color-background-sidenav: var(--bst-color-background);
  }

  // adapt to light/dark-specific content
  @if $mode == "light" {
    .only-dark,
    .only-dark ~ figcaption {
      display: none !important;
    }
  } @else {
    .only-light,
    .only-light ~ figcaption {
      display: none !important;
    }

    /* Adjust images in dark mode (unless they have class .only-dark or
     * .dark-light, in which case assume they're already optimized for dark
     * mode).
     */
    img:not(.only-dark):not(.dark-light) {
      filter: brightness(0.8) contrast(1.2);
    }

    /* Give images a light background in dark mode in case they have
    *  transparency and black text (unless they have class .only-dark or .dark-light, in
    *  which case assume they're already optimized for dark mode).
    */
    .article-container img:not(.only-dark):not(.dark-light) {
      background: rgb(255, 255, 255);
      border-radius: 0.25rem;
    }

    // MathJax SVG outputs should be filled to same color as text.
    .MathJax_SVG * {
      fill: var(--bst-color-text-base);
    }
  }
}

/* Defaults to light mode if data-theme is not set */
html:not([data-theme]) {
  @include theme-colors("light");
}

/* NOTE: @each {...} is like a for-loop
 * https://sass-lang.com/documentation/at-rules/control/each
 */
@each $mode in (light, dark) {
  html[data-theme="#{$mode}"] {
    @include theme-colors($mode);
  }
}

// assign classes too, for runtime use of theme colors
@each $name, $value in $bst-semantic-colors {
  .bst-color-#{$name} {
    color: var(--bst-color-#{$name});
  }
}
