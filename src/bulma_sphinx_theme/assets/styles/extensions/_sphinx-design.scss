/*******************************************************************************
 * Special-cases for the sphinx-design library, mainly to make it compatible
 * with the dark/light themes of pydata-sphinx-theme.
 *
 * NOTE: sphinx-design uses !important quite liberally, so here we must do the
 * same for our overrides to have any effect.
 */

@use "../variables/color" as bstcol;

/*******************************************************************************
  * Color and variables
  *
  * This is a list of the semantic color names from sphinx-design (we only
  * need to override variables that sphinx-design has actually defined).
  * https://github.com/executablebooks/sphinx-design/blob/9226a12a/style/_colors.scss#L31-L43
  */
$sd-semantic-color-names: (
  "primary",
  "secondary",
  "success",
  "info",
  "warning",
  "danger",
  "light",
  "muted",
  "dark",
  "black",
  "white"
);

/* Here we incorporate a modified version of sphinx-design's text-color
  * function, to make sure that text is legible on colored buttons and badges.
  * https://github.com/executablebooks/sphinx-design/blob/9226a12a/style/_colors.scss#L45-L47
  */
@function text-color($value) {
  @return if(lightness($value) > 70, #000, #fff);
}

/**
  * Here we create some extra --bst-color-* variables and use
  * them to override the value of the corresponding sphinx-design variables.
  * This is easier than re-writing the sphinx-design rules. Even easier would be
  * directly assigning our values to the --sd-color-* variables, but then our
  * downstream users couldn't override *our* colors and have it affect buttons
  * and badges.
  *
  * First, define the extra keys needed to cover the full range of semantic
  * color names used in sphinx-design, then merge them with the names we
  * already define for our own needs.
  */
$extra-semantic-colors: (
  "dark": map-get(bstcol.$bst-semantic-colors, "text-base"),
  "muted": map-get(bstcol.$bst-semantic-colors, "text-muted"),
  "light": rgb(201, 201, 201),
  "black": rgb(0, 0, 0),
  "white": rgb(255, 255, 255),
);

$all-colors: map-merge(bstcol.$bst-semantic-colors, $extra-semantic-colors);

// Now we override the --sd-color-* variables.
@each $mode in (light, dark) {
  html[data-theme="#{$mode}"] {
    @each $name in $sd-semantic-color-names {
      // check if this color is defined differently for light/dark
      $value: map-get($all-colors, $name);

      @if type-of($value) ==map {
        $value: map-get($value, $mode);
      }

      // define the bst variables, so that downstream user overrides will work
      --bst-color-#{$name}: #{$value};
      --bst-color-#{$name}-text: #{text-color($value)};
      --bst-color-#{$name}-highlight: #{darken($value, 15%)};
      // override the sphinx-design variables
      --sd-color-#{$name}: var(--bst-color-#{$name});
      --sd-color-#{$name}-text: var(--bst-color-#{$name}-text);
      --sd-color-#{$name}-highlight: var(--bst-color-#{$name}-highlight);
    }
  }
}

// Make sure the color border variables are set using our variables
@each $mode in (light, dark) {
  html[data-theme="#{$mode}"] {
    --sd-color-card-border: var(--bst-color-border);
  }
}

/*******************************************************************************
  * shadows
  */
html[data-theme="light"] {
  .sd-shadow-xs,
  .sd-shadow-sm,
  .sd-shadow-md,
  .sd-shadow-lg {
    @include box-shadow();
  }
}

/*******************************************************************************
  * cards
  */

.article-container .sd-card {
  border: 1px solid var(--bst-color-border);

  .sd-card-header {
    background-color: var(--bst-color-panel-background);
    border-bottom: 1px solid var(--bst-color-border);
  }

  .sd-card-footer {
    background-color: var(--bst-color-panel-background);
    border-top: 1px solid var(--bst-color-border);
  }

  .sd-card-body {
    background-color: var(--bst-color-panel-background);
  }
}

/*******************************************************************************
  * tabs
  */

.article-container .sd-tab-set {
  > input {
    // Active tab label
    &:checked + label {
      border-color: var(--bst-color-primary);
      color: var(--bst-color-primary);
    }

    // hover label
    &:not(:checked) + label:hover {
      border-color: var(--bst-color-primary);
      color: var(--bst-color-primary);
      opacity: 0.5;
    }
  }

  // Tab label
  > label {
    color: var(--bst-color-text-muted);

    // Hovered label
    html &:hover {
      color: var(--bst-color-primary);
      border-color: var(--bst-color-primary);
      opacity: 0.5;
    }
  }
}

/*******************************************************************************
  * Dropdowns
  */
details.sd-dropdown {
  // Remove all borders to over-ride SD behavior, and we'll add our own later
  border: 0px !important;

  summary.sd-card-header {
    border: 0 !important;

    & + div.sd-summary-content {
      border: 0;
    }
  }

  // Drop shadow should behave same as admonitions
  @include box-shadow();

  // Header is where the "clickable" box goes
  summary.sd-card-header {
    display: flex;
    align-items: center;
    position: relative; // So background color works
    font-weight: 600;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    color: var(--bst-color-text) !important;

    // Set a variable that we can re-use for colors later
    // We must set this in the current and content sibling container
    // so that it is defined in both places
    --bst-sd-dropdown-color: var(--sd-color-card-border);

    & + div.sd-summary-content {
      --bst-sd-dropdown-color: var(--sd-color-card-border);
    }

    @each $name in $sd-semantic-color-names {
      &.sd-bg-#{$name} {
        --bst-sd-dropdown-color: var(--sd-color-#{$name});

        // Otherwise it won't be defined in the sibling element
        & + div.sd-summary-content {
          --bst-sd-dropdown-color: var(--sd-color-#{$name});
        }
      }
    }

    // Background color and border are grey by default
    background-color: unset !important;
    @include background-from-color-variable(--bst-sd-dropdown-color);

    // Add a left border with the same structure as our admonitions
    border: 1px solid var(--bst-sd-dropdown-color) !important;

    & + div.sd-summary-content {
      border-bottom: 1px solid var(--bst-sd-dropdown-color) !important;
      border-left: 1px solid var(--bst-sd-dropdown-color) !important;
      border-right: 1px solid var(--bst-sd-dropdown-color) !important;
      border-bottom-left-radius: calc(0.25rem - 1px);
    }

    span.sd-summary-icon {
      display: inline-flex;
      align-items: center;
      color: var(--bst-sd-dropdown-color) !important;
    }

    // Positioning of the caret
    .sd-summary-up,
    .sd-summary-down {
      top: 0.7rem;
    }
  }
}
